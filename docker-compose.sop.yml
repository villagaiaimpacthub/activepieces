# ActivePieces SOP Tool - Docker Compose Configuration
# Complete deployment setup with all required services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: activepieces-sop-postgres
    environment:
      POSTGRES_DB: ${AP_POSTGRES_DATABASE:-activepieces_sop}
      POSTGRES_USER: ${AP_POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${AP_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${AP_POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AP_POSTGRES_USERNAME:-postgres} -d ${AP_POSTGRES_DATABASE:-activepieces_sop}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: activepieces-sop-redis
    command: redis-server --appendonly yes ${AP_REDIS_PASSWORD:+--requirepass $AP_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${AP_REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ActivePieces Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.sop
      target: production
    container_name: activepieces-sop-api
    environment:
      # ActivePieces Core
      AP_ENVIRONMENT: ${AP_ENVIRONMENT:-prod}
      AP_API_KEY: ${AP_API_KEY}
      AP_ENCRYPTION_KEY: ${AP_ENCRYPTION_KEY}
      AP_JWT_SECRET: ${AP_JWT_SECRET}
      AP_FRONTEND_URL: ${AP_FRONTEND_URL:-http://localhost:8080}
      AP_WEBHOOK_TIMEOUT_SECONDS: ${AP_WEBHOOK_TIMEOUT_SECONDS:-30}
      AP_EXECUTION_MODE: ${AP_EXECUTION_MODE:-UNSANDBOXED}
      AP_ENGINE_EXECUTABLE_PATH: ${AP_ENGINE_EXECUTABLE_PATH:-dist/packages/engine/main.js}
      
      # Database
      AP_POSTGRES_HOST: postgres
      AP_POSTGRES_PORT: 5432
      AP_POSTGRES_DATABASE: ${AP_POSTGRES_DATABASE:-activepieces_sop}
      AP_POSTGRES_USERNAME: ${AP_POSTGRES_USERNAME:-postgres}
      AP_POSTGRES_PASSWORD: ${AP_POSTGRES_PASSWORD}
      AP_POSTGRES_SSL: ${AP_POSTGRES_SSL:-false}
      
      # Redis
      AP_REDIS_HOST: redis
      AP_REDIS_PORT: 6379
      AP_REDIS_PASSWORD: ${AP_REDIS_PASSWORD}
      
      # SOP Configuration
      SOP_TEMPLATE_CACHE_TTL: ${SOP_TEMPLATE_CACHE_TTL:-3600}
      SOP_MAX_FILE_SIZE: ${SOP_MAX_FILE_SIZE:-52428800}
      SOP_UPLOAD_PATH: ${SOP_UPLOAD_PATH:-uploads/sop}
      SOP_AUDIT_LOG_ENABLED: ${SOP_AUDIT_LOG_ENABLED:-true}
      SOP_ENABLE_TEMPLATE_SHARING: ${SOP_ENABLE_TEMPLATE_SHARING:-true}
      
      # Security
      SOP_CORS_ORIGINS: ${SOP_CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      SOP_ENABLE_RATE_LIMITING: ${SOP_ENABLE_RATE_LIMITING:-true}
      
      # Performance
      SOP_CONCURRENT_EXECUTIONS_LIMIT: ${SOP_CONCURRENT_EXECUTIONS_LIMIT:-50}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - sop_uploads:/app/uploads/sop
      - sop_backups:/app/backups/sop
      - ./logs:/app/logs
    ports:
      - "3000:3000"
      - "${SOP_METRICS_PORT:-9090}:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ActivePieces Frontend
  frontend:
    image: nginx:alpine
    container_name: activepieces-sop-frontend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./dist/packages/ui/core:/usr/share/nginx/html
    ports:
      - "8080:80"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Background Job Worker (for async SOP processing)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.sop
      target: production
    container_name: activepieces-sop-worker
    command: ["node", "dist/packages/server/worker/main.js"]
    environment:
      # Inherit all environment variables from API
      AP_ENVIRONMENT: ${AP_ENVIRONMENT:-prod}
      AP_API_KEY: ${AP_API_KEY}
      AP_ENCRYPTION_KEY: ${AP_ENCRYPTION_KEY}
      AP_JWT_SECRET: ${AP_JWT_SECRET}
      
      # Database
      AP_POSTGRES_HOST: postgres
      AP_POSTGRES_PORT: 5432
      AP_POSTGRES_DATABASE: ${AP_POSTGRES_DATABASE:-activepieces_sop}
      AP_POSTGRES_USERNAME: ${AP_POSTGRES_USERNAME:-postgres}
      AP_POSTGRES_PASSWORD: ${AP_POSTGRES_PASSWORD}
      
      # Redis
      AP_REDIS_HOST: redis
      AP_REDIS_PORT: 6379
      AP_REDIS_PASSWORD: ${AP_REDIS_PASSWORD}
      
      # Worker Configuration
      SOP_WORKER_CONCURRENCY: ${SOP_WORKER_CONCURRENCY:-5}
      SOP_WORKER_TIMEOUT: ${SOP_WORKER_TIMEOUT:-300000}
      
    depends_on:
      - postgres
      - redis
    volumes:
      - sop_uploads:/app/uploads/sop
      - ./logs:/app/logs
    restart: unless-stopped

  # Optional: Prometheus for Metrics (if SOP_ENABLE_METRICS=true)
  prometheus:
    image: prom/prometheus:latest
    container_name: activepieces-sop-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for Dashboards (if monitoring enabled)
  grafana:
    image: grafana/grafana:latest
    container_name: activepieces-sop-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Backup Service
  backup:
    image: postgres:15-alpine
    container_name: activepieces-sop-backup
    environment:
      PGPASSWORD: ${AP_POSTGRES_PASSWORD}
    volumes:
      - ./docker/backup/backup.sh:/backup.sh:ro
      - sop_backups:/backups
    command: |
      sh -c '
        echo "${SOP_BACKUP_SCHEDULE:-0 2 * * *} /backup.sh" | crontab -
        crond -f
      '
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  sop_uploads:
    driver: local
  sop_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: activepieces-sop-network